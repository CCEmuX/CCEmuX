buildscript {
	dependencies {
		classpath 'net.sf.proguard:proguard-gradle:6.1.0beta1'
		classpath 'com.google.code.gson:gson:2.8.1'
	}
}

plugins {
	id 'application'
	id 'com.github.johnrengelman.shadow' version '5.1.0'
	id 'eclipse'
}

allprojects { it ->
	group = 'net.clgd'
	version = '1.0.0' + (System.getenv("GITHUB_SHA") == null ? '' : "-${System.getenv("GITHUB_SHA")}")

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	eclipse.project {
		natures 'org.eclipse.buildship.core.gradleprojectnature'
		natures 'org.springsource.ide.eclipse.gradle.core.nature'
	}

	repositories {
		mavenCentral()

		maven {
			name = 'cc-tweaked'
			url = "http://squiddev.cc/maven/"
		}
	}

	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xlint" << "-Xlint:-processing" << "-Xlint:-rawtypes" << "-Xlint:-classfile"
		}
	}
}

mainClassName = 'net.clgd.ccemux.init.Launcher'

repositories {
	maven {
		name = "cc.crzd.me"
		url = "http://cc.crzd.me/maven"
	}
}

configurations {
	computercraft
}

dependencies {
	implementation project(':plugin-api')

	implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.2'
	implementation 'org.apache.logging.log4j:log4j-core:2.11.2'

	implementation 'commons-cli:commons-cli:1.4'
	implementation 'org.apache.commons:commons-lang3:3.6'
	implementation 'io.netty:netty-all:4.1.9.Final'
	implementation 'it.unimi.dsi:fastutil:8.3.0'

	implementation 'com.google.code.gson:gson:2.8.1'

	compileOnly 'org.projectlombok:lombok:1.18.10'
	annotationProcessor 'org.projectlombok:lombok:1.18.10'

	compileOnly 'com.google.auto.service:auto-service:1.0-rc6'
	annotationProcessor 'com.google.auto.service:auto-service:1.0-rc6'

	testCompile 'junit:junit:4.12'
	testCompileOnly 'org.projectlombok:lombok:1.18.10'

	computercraft 'dan200.computercraft:ComputerCraft:1.80pr1-build5'
}

processResources {
	exclude '**/*.xcf' // GIMP images

	filesMatching("ccemux.version") {
		expand 'version': version
	}
}

jar {
	manifest {
		attributes 'SplashScreen-Image': 'img/splash2.gif'
		attributes 'Implementation-Version': version
		attributes 'Main-Class': mainClassName
	}
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import proguard.gradle.ProGuardTask

shadowJar {
	classifier = 'base'
	description "A shadowed jar which bundles all dependencies aside from CC"

	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath]

	dependencies {
		exclude dependency('.*:cc-tweaked-1.12.2:.*')
	}
}

task cctweakedJar(type: ShadowJar) {
	classifier = 'cct'
	description "A shadowed jar which bundles CC: Tweaked"

	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath]
	manifest.inheritFrom jar.manifest
}

task computercraftJar(type: ShadowJar) {
	classifier = 'cc'
	description "A shadowed jar which bundles ComputerCraft"

	from sourceSets.main.output
	configurations = [project.configurations.runtimeClasspath, project.configurations.computercraft]
	manifest.inheritFrom jar.manifest

	dependencies {
		exclude dependency('.*:cc-tweaked-1.12.2:.*')
	}
}

task cctweakedMin(type: ProGuardTask) {
	dependsOn(cctweakedJar)
	injars cctweakedJar.archivePath
	outjars "${cctweakedJar.archivePath.absolutePath.replace(".jar", "")}-min.jar"
}

task computercraftMin(type: ProGuardTask) {
	dependsOn(computercraftJar)
	injars computercraftJar.archivePath
	outjars "${computercraftJar.archivePath.absolutePath.replace(".jar", "")}-min.jar"

	// Ignore some CC:T specific code
	dontwarn "dan200.computercraft.core.apis.handles.ArrayByteChannel"
	dontwarn "net.clgd.ccemux.init.UserConfigCCTweaked"
}

gradle.projectsEvaluated {
	tasks.withType(ShadowJar) {
		// Append the base license files
		append 'META-INF/LICENSE'
		append 'META-INF/LICENSE.txt'
		append 'META-INF/NOTICE'
		append 'META-INF/NOTICE.txt'

		// Exclude random junk
		exclude '*.html'
		exclude 'META-INF/maven/*/*/*.*'

		// Prune arbitrary stuff from the CC jar
		exclude(['api/dan200/**', 'docs/**'])
		exclude(['assets/computercraft/**/*.json', 'assets/computercraft/textures/blocks/*', 'assets/computercraft/textures/items/*'])
	}

	tasks.withType(ProGuardTask) {
		libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
		libraryjars "${System.getProperty('java.home')}/lib/jce.jar"
		libraryjars "${System.getProperty('java.home')}/lib/ext/jfxrt.jar"

		// Ignore references to these packages
		["net.minecraft", "net.minecraftforge", "org.apache.bcel"].each { dontwarn "${it}.**" }
		// Ignore any warnings in these packages. They have a lot of soft dependencies.
		["io.netty", "org.apache.logging", "org.slf4j"].each { dontwarn "${it}.**" }
		// It appears in the constant table, but not in the actual code, hence we need to ignore it.
		dontwarn "lombok.val"
		// Exclude the non-core portions of CC. These end up referencing a lot of MC stuff indirectly.
		["client", "shared", "server"].each { dontwarn "dan200.computercraft.${it}.**" }
		dontwarn "dan200.computercraft.core.tracking.ComputerTracker"
		dontwarn "dan200.computercraft.api.turtle.**"
		dontwarn "org.apache.commons.io.IOUtils"

		// We want to avoid as much obfuscation as possible. We're only doing this to shrink code size
		dontobfuscate; dontoptimize; keepattributes; keepparameternames
		keepdirectories "assets/computercraft/lua**"
		keepdirectories "rom/**"

		// Keep all members of an enum. Otherwise things like EnumSet start complaining
		keep "enum ** { *; }"
		// Keep all MBean interfaces.
		keep "interface **MBean { public *; }"

		// Log4j bundles Java 9 versions, which is great, but rather breaks Proguard
		dontwarn 'module-info'

		[
			// Preserve all dependencies of the plugin-api
			"net.clgd.ccemux", "dan200.computercraft", "com.google.common", "org.slf4j",
			// We use reflection to create library functions, so we need to be a little basic.
			"org.luaj.vm2.lib",
			// Ideally we could strip more from here, but this'll do for now
			"org.apache.logging.log4j",
		].each { keep "class ${it}.** { *; }" }
	}
}

run { standardInput = System.in }
runShadow { standardInput = System.in }

assemble.dependsOn tasks.withType(ShadowJar)
assemble.dependsOn tasks.withType(ProGuardTask)
